// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/message.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Message service

type MessageService interface {
	Sub(ctx context.Context, in *SubRequest, opts ...client.CallOption) (*Response, error)
	UnSub(ctx context.Context, in *UnSubRequest, opts ...client.CallOption) (*Response, error)
	Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*Response, error)
}

type messageService struct {
	c    client.Client
	name string
}

func NewMessageService(name string, c client.Client) MessageService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "domain.message.service"
	}
	return &messageService{
		c:    c,
		name: name,
	}
}

func (c *messageService) Sub(ctx context.Context, in *SubRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Message.Sub", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) UnSub(ctx context.Context, in *UnSubRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Message.UnSub", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageService) Send(ctx context.Context, in *SendRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Message.Send", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Message service

type MessageHandler interface {
	Sub(context.Context, *SubRequest, *Response) error
	UnSub(context.Context, *UnSubRequest, *Response) error
	Send(context.Context, *SendRequest, *Response) error
}

func RegisterMessageHandler(s server.Server, hdlr MessageHandler, opts ...server.HandlerOption) error {
	type message interface {
		Sub(ctx context.Context, in *SubRequest, out *Response) error
		UnSub(ctx context.Context, in *UnSubRequest, out *Response) error
		Send(ctx context.Context, in *SendRequest, out *Response) error
	}
	type Message struct {
		message
	}
	h := &messageHandler{hdlr}
	return s.Handle(s.NewHandler(&Message{h}, opts...))
}

type messageHandler struct {
	MessageHandler
}

func (h *messageHandler) Sub(ctx context.Context, in *SubRequest, out *Response) error {
	return h.MessageHandler.Sub(ctx, in, out)
}

func (h *messageHandler) UnSub(ctx context.Context, in *UnSubRequest, out *Response) error {
	return h.MessageHandler.UnSub(ctx, in, out)
}

func (h *messageHandler) Send(ctx context.Context, in *SendRequest, out *Response) error {
	return h.MessageHandler.Send(ctx, in, out)
}
