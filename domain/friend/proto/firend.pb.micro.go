// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/firend.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Friend service

type FriendService interface {
	CreateApplicationInfo(ctx context.Context, in *CreateApplicationRequest, opts ...client.CallOption) (*ApplicationResponse, error)
	GetApplicationInfo(ctx context.Context, in *GetApplicationRequest, opts ...client.CallOption) (*ApplicationResponse, error)
	PassApplicationInfo(ctx context.Context, in *PassApplicationInfoRequest, opts ...client.CallOption) (*Response, error)
	RejectApplicationInfo(ctx context.Context, in *RejectApplicationInfoRequest, opts ...client.CallOption) (*Response, error)
	GetApplicationList(ctx context.Context, in *GetApplicationListRequest, opts ...client.CallOption) (*GetApplicationListResponse, error)
	GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...client.CallOption) (*GetFriendListResponse, error)
	DeleteFriendInfo(ctx context.Context, in *DeleteFriendInfoRequest, opts ...client.CallOption) (*Response, error)
	CreateApplicationSay(ctx context.Context, in *CreateApplicationSayRequest, opts ...client.CallOption) (*CreateApplicationSayResponse, error)
}

type friendService struct {
	c    client.Client
	name string
}

func NewFriendService(name string, c client.Client) FriendService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "domain.friend.service"
	}
	return &friendService{
		c:    c,
		name: name,
	}
}

func (c *friendService) CreateApplicationInfo(ctx context.Context, in *CreateApplicationRequest, opts ...client.CallOption) (*ApplicationResponse, error) {
	req := c.c.NewRequest(c.name, "Friend.CreateApplicationInfo", in)
	out := new(ApplicationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendService) GetApplicationInfo(ctx context.Context, in *GetApplicationRequest, opts ...client.CallOption) (*ApplicationResponse, error) {
	req := c.c.NewRequest(c.name, "Friend.GetApplicationInfo", in)
	out := new(ApplicationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendService) PassApplicationInfo(ctx context.Context, in *PassApplicationInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Friend.PassApplicationInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendService) RejectApplicationInfo(ctx context.Context, in *RejectApplicationInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Friend.RejectApplicationInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendService) GetApplicationList(ctx context.Context, in *GetApplicationListRequest, opts ...client.CallOption) (*GetApplicationListResponse, error) {
	req := c.c.NewRequest(c.name, "Friend.GetApplicationList", in)
	out := new(GetApplicationListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendService) GetFriendList(ctx context.Context, in *GetFriendListRequest, opts ...client.CallOption) (*GetFriendListResponse, error) {
	req := c.c.NewRequest(c.name, "Friend.GetFriendList", in)
	out := new(GetFriendListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendService) DeleteFriendInfo(ctx context.Context, in *DeleteFriendInfoRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Friend.DeleteFriendInfo", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendService) CreateApplicationSay(ctx context.Context, in *CreateApplicationSayRequest, opts ...client.CallOption) (*CreateApplicationSayResponse, error) {
	req := c.c.NewRequest(c.name, "Friend.CreateApplicationSay", in)
	out := new(CreateApplicationSayResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Friend service

type FriendHandler interface {
	CreateApplicationInfo(context.Context, *CreateApplicationRequest, *ApplicationResponse) error
	GetApplicationInfo(context.Context, *GetApplicationRequest, *ApplicationResponse) error
	PassApplicationInfo(context.Context, *PassApplicationInfoRequest, *Response) error
	RejectApplicationInfo(context.Context, *RejectApplicationInfoRequest, *Response) error
	GetApplicationList(context.Context, *GetApplicationListRequest, *GetApplicationListResponse) error
	GetFriendList(context.Context, *GetFriendListRequest, *GetFriendListResponse) error
	DeleteFriendInfo(context.Context, *DeleteFriendInfoRequest, *Response) error
	CreateApplicationSay(context.Context, *CreateApplicationSayRequest, *CreateApplicationSayResponse) error
}

func RegisterFriendHandler(s server.Server, hdlr FriendHandler, opts ...server.HandlerOption) error {
	type friend interface {
		CreateApplicationInfo(ctx context.Context, in *CreateApplicationRequest, out *ApplicationResponse) error
		GetApplicationInfo(ctx context.Context, in *GetApplicationRequest, out *ApplicationResponse) error
		PassApplicationInfo(ctx context.Context, in *PassApplicationInfoRequest, out *Response) error
		RejectApplicationInfo(ctx context.Context, in *RejectApplicationInfoRequest, out *Response) error
		GetApplicationList(ctx context.Context, in *GetApplicationListRequest, out *GetApplicationListResponse) error
		GetFriendList(ctx context.Context, in *GetFriendListRequest, out *GetFriendListResponse) error
		DeleteFriendInfo(ctx context.Context, in *DeleteFriendInfoRequest, out *Response) error
		CreateApplicationSay(ctx context.Context, in *CreateApplicationSayRequest, out *CreateApplicationSayResponse) error
	}
	type Friend struct {
		friend
	}
	h := &friendHandler{hdlr}
	return s.Handle(s.NewHandler(&Friend{h}, opts...))
}

type friendHandler struct {
	FriendHandler
}

func (h *friendHandler) CreateApplicationInfo(ctx context.Context, in *CreateApplicationRequest, out *ApplicationResponse) error {
	return h.FriendHandler.CreateApplicationInfo(ctx, in, out)
}

func (h *friendHandler) GetApplicationInfo(ctx context.Context, in *GetApplicationRequest, out *ApplicationResponse) error {
	return h.FriendHandler.GetApplicationInfo(ctx, in, out)
}

func (h *friendHandler) PassApplicationInfo(ctx context.Context, in *PassApplicationInfoRequest, out *Response) error {
	return h.FriendHandler.PassApplicationInfo(ctx, in, out)
}

func (h *friendHandler) RejectApplicationInfo(ctx context.Context, in *RejectApplicationInfoRequest, out *Response) error {
	return h.FriendHandler.RejectApplicationInfo(ctx, in, out)
}

func (h *friendHandler) GetApplicationList(ctx context.Context, in *GetApplicationListRequest, out *GetApplicationListResponse) error {
	return h.FriendHandler.GetApplicationList(ctx, in, out)
}

func (h *friendHandler) GetFriendList(ctx context.Context, in *GetFriendListRequest, out *GetFriendListResponse) error {
	return h.FriendHandler.GetFriendList(ctx, in, out)
}

func (h *friendHandler) DeleteFriendInfo(ctx context.Context, in *DeleteFriendInfoRequest, out *Response) error {
	return h.FriendHandler.DeleteFriendInfo(ctx, in, out)
}

func (h *friendHandler) CreateApplicationSay(ctx context.Context, in *CreateApplicationSayRequest, out *CreateApplicationSayResponse) error {
	return h.FriendHandler.CreateApplicationSay(ctx, in, out)
}
