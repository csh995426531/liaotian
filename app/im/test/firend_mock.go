// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/friend/proto/firend.pb.micro.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	client "github.com/micro/go-micro/client"
	proto "liaotian/domain/friend/proto"
	reflect "reflect"
)

// MockFriendService is a mock of FriendService interface
type MockFriendService struct {
	ctrl     *gomock.Controller
	recorder *MockFriendServiceMockRecorder
}

// MockFriendServiceMockRecorder is the mock recorder for MockFriendService
type MockFriendServiceMockRecorder struct {
	mock *MockFriendService
}

// NewMockFriendService creates a new mock instance
func NewMockFriendService(ctrl *gomock.Controller) *MockFriendService {
	mock := &MockFriendService{ctrl: ctrl}
	mock.recorder = &MockFriendServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFriendService) EXPECT() *MockFriendServiceMockRecorder {
	return m.recorder
}

// CreateApplicationInfo mocks base method
func (m *MockFriendService) CreateApplicationInfo(ctx context.Context, in *proto.CreateApplicationRequest, opts ...client.CallOption) (*proto.ApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationInfo", varargs...)
	ret0, _ := ret[0].(*proto.ApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationInfo indicates an expected call of CreateApplicationInfo
func (mr *MockFriendServiceMockRecorder) CreateApplicationInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationInfo", reflect.TypeOf((*MockFriendService)(nil).CreateApplicationInfo), varargs...)
}

// GetApplicationInfo mocks base method
func (m *MockFriendService) GetApplicationInfo(ctx context.Context, in *proto.GetApplicationRequest, opts ...client.CallOption) (*proto.ApplicationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationInfo", varargs...)
	ret0, _ := ret[0].(*proto.ApplicationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationInfo indicates an expected call of GetApplicationInfo
func (mr *MockFriendServiceMockRecorder) GetApplicationInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationInfo", reflect.TypeOf((*MockFriendService)(nil).GetApplicationInfo), varargs...)
}

// PassApplicationInfo mocks base method
func (m *MockFriendService) PassApplicationInfo(ctx context.Context, in *proto.PassApplicationInfoRequest, opts ...client.CallOption) (*proto.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PassApplicationInfo", varargs...)
	ret0, _ := ret[0].(*proto.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PassApplicationInfo indicates an expected call of PassApplicationInfo
func (mr *MockFriendServiceMockRecorder) PassApplicationInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PassApplicationInfo", reflect.TypeOf((*MockFriendService)(nil).PassApplicationInfo), varargs...)
}

// RejectApplicationInfo mocks base method
func (m *MockFriendService) RejectApplicationInfo(ctx context.Context, in *proto.RejectApplicationInfoRequest, opts ...client.CallOption) (*proto.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RejectApplicationInfo", varargs...)
	ret0, _ := ret[0].(*proto.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RejectApplicationInfo indicates an expected call of RejectApplicationInfo
func (mr *MockFriendServiceMockRecorder) RejectApplicationInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectApplicationInfo", reflect.TypeOf((*MockFriendService)(nil).RejectApplicationInfo), varargs...)
}

// GetApplicationList mocks base method
func (m *MockFriendService) GetApplicationList(ctx context.Context, in *proto.GetApplicationListRequest, opts ...client.CallOption) (*proto.GetApplicationListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationList", varargs...)
	ret0, _ := ret[0].(*proto.GetApplicationListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationList indicates an expected call of GetApplicationList
func (mr *MockFriendServiceMockRecorder) GetApplicationList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationList", reflect.TypeOf((*MockFriendService)(nil).GetApplicationList), varargs...)
}

// GetFriendList mocks base method
func (m *MockFriendService) GetFriendList(ctx context.Context, in *proto.GetFriendListRequest, opts ...client.CallOption) (*proto.GetFriendListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFriendList", varargs...)
	ret0, _ := ret[0].(*proto.GetFriendListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendList indicates an expected call of GetFriendList
func (mr *MockFriendServiceMockRecorder) GetFriendList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendList", reflect.TypeOf((*MockFriendService)(nil).GetFriendList), varargs...)
}

// DeleteFriendInfo mocks base method
func (m *MockFriendService) DeleteFriendInfo(ctx context.Context, in *proto.DeleteFriendInfoRequest, opts ...client.CallOption) (*proto.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteFriendInfo", varargs...)
	ret0, _ := ret[0].(*proto.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFriendInfo indicates an expected call of DeleteFriendInfo
func (mr *MockFriendServiceMockRecorder) DeleteFriendInfo(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriendInfo", reflect.TypeOf((*MockFriendService)(nil).DeleteFriendInfo), varargs...)
}

// CreateApplicationSay mocks base method
func (m *MockFriendService) CreateApplicationSay(ctx context.Context, in *proto.CreateApplicationSayRequest, opts ...client.CallOption) (*proto.CreateApplicationSayResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateApplicationSay", varargs...)
	ret0, _ := ret[0].(*proto.CreateApplicationSayResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplicationSay indicates an expected call of CreateApplicationSay
func (mr *MockFriendServiceMockRecorder) CreateApplicationSay(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationSay", reflect.TypeOf((*MockFriendService)(nil).CreateApplicationSay), varargs...)
}

// MockFriendHandler is a mock of FriendHandler interface
type MockFriendHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFriendHandlerMockRecorder
}

// MockFriendHandlerMockRecorder is the mock recorder for MockFriendHandler
type MockFriendHandlerMockRecorder struct {
	mock *MockFriendHandler
}

// NewMockFriendHandler creates a new mock instance
func NewMockFriendHandler(ctrl *gomock.Controller) *MockFriendHandler {
	mock := &MockFriendHandler{ctrl: ctrl}
	mock.recorder = &MockFriendHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFriendHandler) EXPECT() *MockFriendHandlerMockRecorder {
	return m.recorder
}

// CreateApplicationInfo mocks base method
func (m *MockFriendHandler) CreateApplicationInfo(arg0 context.Context, arg1 *proto.CreateApplicationRequest, arg2 *proto.ApplicationResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplicationInfo indicates an expected call of CreateApplicationInfo
func (mr *MockFriendHandlerMockRecorder) CreateApplicationInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationInfo", reflect.TypeOf((*MockFriendHandler)(nil).CreateApplicationInfo), arg0, arg1, arg2)
}

// GetApplicationInfo mocks base method
func (m *MockFriendHandler) GetApplicationInfo(arg0 context.Context, arg1 *proto.GetApplicationRequest, arg2 *proto.ApplicationResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetApplicationInfo indicates an expected call of GetApplicationInfo
func (mr *MockFriendHandlerMockRecorder) GetApplicationInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationInfo", reflect.TypeOf((*MockFriendHandler)(nil).GetApplicationInfo), arg0, arg1, arg2)
}

// PassApplicationInfo mocks base method
func (m *MockFriendHandler) PassApplicationInfo(arg0 context.Context, arg1 *proto.PassApplicationInfoRequest, arg2 *proto.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PassApplicationInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PassApplicationInfo indicates an expected call of PassApplicationInfo
func (mr *MockFriendHandlerMockRecorder) PassApplicationInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PassApplicationInfo", reflect.TypeOf((*MockFriendHandler)(nil).PassApplicationInfo), arg0, arg1, arg2)
}

// RejectApplicationInfo mocks base method
func (m *MockFriendHandler) RejectApplicationInfo(arg0 context.Context, arg1 *proto.RejectApplicationInfoRequest, arg2 *proto.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectApplicationInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectApplicationInfo indicates an expected call of RejectApplicationInfo
func (mr *MockFriendHandlerMockRecorder) RejectApplicationInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectApplicationInfo", reflect.TypeOf((*MockFriendHandler)(nil).RejectApplicationInfo), arg0, arg1, arg2)
}

// GetApplicationList mocks base method
func (m *MockFriendHandler) GetApplicationList(arg0 context.Context, arg1 *proto.GetApplicationListRequest, arg2 *proto.GetApplicationListResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetApplicationList indicates an expected call of GetApplicationList
func (mr *MockFriendHandlerMockRecorder) GetApplicationList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationList", reflect.TypeOf((*MockFriendHandler)(nil).GetApplicationList), arg0, arg1, arg2)
}

// GetFriendList mocks base method
func (m *MockFriendHandler) GetFriendList(arg0 context.Context, arg1 *proto.GetFriendListRequest, arg2 *proto.GetFriendListResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendList", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetFriendList indicates an expected call of GetFriendList
func (mr *MockFriendHandlerMockRecorder) GetFriendList(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendList", reflect.TypeOf((*MockFriendHandler)(nil).GetFriendList), arg0, arg1, arg2)
}

// DeleteFriendInfo mocks base method
func (m *MockFriendHandler) DeleteFriendInfo(arg0 context.Context, arg1 *proto.DeleteFriendInfoRequest, arg2 *proto.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFriendInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFriendInfo indicates an expected call of DeleteFriendInfo
func (mr *MockFriendHandlerMockRecorder) DeleteFriendInfo(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFriendInfo", reflect.TypeOf((*MockFriendHandler)(nil).DeleteFriendInfo), arg0, arg1, arg2)
}

// CreateApplicationSay mocks base method
func (m *MockFriendHandler) CreateApplicationSay(arg0 context.Context, arg1 *proto.CreateApplicationSayRequest, arg2 *proto.CreateApplicationSayResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplicationSay", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateApplicationSay indicates an expected call of CreateApplicationSay
func (mr *MockFriendHandlerMockRecorder) CreateApplicationSay(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplicationSay", reflect.TypeOf((*MockFriendHandler)(nil).CreateApplicationSay), arg0, arg1, arg2)
}
