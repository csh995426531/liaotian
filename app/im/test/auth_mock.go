// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/auth/proto/auth.pb.micro.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	client "github.com/micro/go-micro/client"
	proto "liaotian/domain/auth/proto"
	reflect "reflect"
)

// MockAuthService is a mock of AuthService interface
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// Generated mocks base method
func (m *MockAuthService) Generated(ctx context.Context, in *proto.GeneratedRequest, opts ...client.CallOption) (*proto.GeneratedResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Generated", varargs...)
	ret0, _ := ret[0].(*proto.GeneratedResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generated indicates an expected call of Generated
func (mr *MockAuthServiceMockRecorder) Generated(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generated", reflect.TypeOf((*MockAuthService)(nil).Generated), varargs...)
}

// Parse mocks base method
func (m *MockAuthService) Parse(ctx context.Context, in *proto.ParseRequest, opts ...client.CallOption) (*proto.ParseResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Parse", varargs...)
	ret0, _ := ret[0].(*proto.ParseResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse
func (mr *MockAuthServiceMockRecorder) Parse(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockAuthService)(nil).Parse), varargs...)
}

// MockAuthHandler is a mock of AuthHandler interface
type MockAuthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHandlerMockRecorder
}

// MockAuthHandlerMockRecorder is the mock recorder for MockAuthHandler
type MockAuthHandlerMockRecorder struct {
	mock *MockAuthHandler
}

// NewMockAuthHandler creates a new mock instance
func NewMockAuthHandler(ctrl *gomock.Controller) *MockAuthHandler {
	mock := &MockAuthHandler{ctrl: ctrl}
	mock.recorder = &MockAuthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthHandler) EXPECT() *MockAuthHandlerMockRecorder {
	return m.recorder
}

// Generated mocks base method
func (m *MockAuthHandler) Generated(arg0 context.Context, arg1 *proto.GeneratedRequest, arg2 *proto.GeneratedResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generated", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generated indicates an expected call of Generated
func (mr *MockAuthHandlerMockRecorder) Generated(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generated", reflect.TypeOf((*MockAuthHandler)(nil).Generated), arg0, arg1, arg2)
}

// Parse mocks base method
func (m *MockAuthHandler) Parse(arg0 context.Context, arg1 *proto.ParseRequest, arg2 *proto.ParseResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Parse indicates an expected call of Parse
func (mr *MockAuthHandlerMockRecorder) Parse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockAuthHandler)(nil).Parse), arg0, arg1, arg2)
}
